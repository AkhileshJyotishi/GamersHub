import { PhoneNumberUtil } from "google-libphonenumber"
export interface ValidationParams {
  required?: boolean
  maxLength?: number
  minValue?: number
  maxValue?: number
  fileMaxSize?: number
  fileMinSize?: number
  allowedFileTypes?: string[]
}
export type ValidationFunction<T> = T extends File
  ? (value: T | Allow, params?: ValidationParams) => Promise<string>
  : (value: T | Allow, params?: ValidationParams) => string
/**
 * Validates a string value based on a set of validation parameters.
 *
 * @param value - The string value to be validated.
 * @param params - An optional object containing validation parameters such as `required` and `maxLength`.
 * @returns An error message indicating the validation failure, or an empty string if the value is valid.
 *
 * @example
 * const value = "Hello World";
 * const params = { required: true, maxLength: 10 };
 * const result = validateStringField(value, params);
 * console.log(result); // Output: "*exceeds maximum length (10)"
 */
export const validateStringField: ValidationFunction<string> = (value, params) => {
  // console.log(object)
  if (value === null) {
    if (params?.required) {
      return "*required"
    }
    return ""
  }

  if (params?.required && value === "") {
    return "*required"
  }

  if (params?.maxLength && value.length > params.maxLength) {
    return `*exceeds maximum length (${params.maxLength})`
  }

  return ""
}
/**
 * Validates a file input field.
 *
 * @param value - The file value to be validated. It can be a `File` object or the special value `Allow`.
 * @param params - Optional parameters for the validation. It can include properties like `required`, `fileMaxSize`, and others.
 * @returns A promise that resolves to an error message if there are validation errors, or an empty string if the file is valid.
 */
export const validateFileField: ValidationFunction<File> = async (value, params) => {
  if (value === null) {
    if (params?.required) {
      return "*required"
    }
    return ""
  }
  const maxSizeInBytes = params?.fileMaxSize ?? 1024 * 1024 // 1MB if not provided

  if (value.size > maxSizeInBytes) {
    return `File size must be less than ${maxSizeInBytes / (1024 * 1024)}MB`
  }

  const img = new Image()
  // console.log("that value ", value)
  if (typeof value == "string") {
    img.src = value
  } else {
    img.src = URL.createObjectURL(value)
  }

  return new Promise((resolve, reject) => {
    img.onload = () => {
      const maxWidth = 1920
      const maxHeight = 1080
      const minWidth = 640
      const minHeight = 320

      if (img.naturalWidth > maxWidth || img.naturalHeight > maxHeight) {
        resolve(`Cover dimensions needs to be ${maxWidth}p - ${maxHeight}p or smaller`)
      } else if (img.naturalWidth < minWidth || img.naturalHeight < minHeight) {
        resolve(`Cover dimensions needs to be ${minWidth}p - ${minHeight}p or larger`)
      } else {
        resolve("")
      }
    }

    img.onerror = () => {
      reject("Error loading image")
    }
  })
}
/**
 * Validates a number field.
 *
 * @param value - The value to be validated.
 * @param params - An optional object containing validation parameters such as `required`, `minValue`, and `maxValue`.
 * @returns The validation result. It can be an error message or an empty string.
 */
export const validateNumberField: ValidationFunction<number> = (value, params) => {
  /**
   * Validates a number field.
   *
   * @param value - The value to be validated.
   * @param params - An optional object containing validation parameters such as `required`, `minValue`, and `maxValue`.
   * @returns The validation result. It can be an error message or an empty string.
   */
  if (value === null) {
    if (params?.required) {
      return "*required"
    }
    return ""
  }

  if (params?.required && (typeof value !== "number" || isNaN(value))) {
    return "*required"
  }

  if (params?.minValue !== undefined && value < params.minValue) {
    return `Value must be greater than or equal to ${params.minValue}`
  }

  if (params?.maxValue !== undefined && value > params.maxValue) {
    return `Value must be less than or equal to ${params.maxValue}`
  }

  return ""
}

export const validateBooleanField: ValidationFunction<boolean> = () => {
  return ""
}
/**
 * Validates an array of strings.
 *
 * @param value - The array of strings to be validated.
 * @param params - An optional object containing validation parameters.
 * @returns The error message generated by the validation function. It will be an empty string if the validation passes.
 *
 * @example
 * const value = ['apple', 'banana', 'orange'];
 * const params = { required: true, maxLength: 2 };
 * const errorMessage = validateStringArrayField(value, params);
 * console.log(errorMessage); // Output: "*maximum 2 can be selected"
 */
export const validateStringArrayField: ValidationFunction<readonly string[]> = (value, params) => {
  if (value === null) {
    if (params?.required) {
      return "*required"
    }
    return ""
  }

  if (params?.required && value.length === 0) {
    return "*required"
  }

  if (params?.maxLength && value.length >= params.maxLength) {
    return `*maximum ${params.maxLength} can be selected`
  }

  return ""
}

/**
 * Validates an array of files.
 *
 * @param value - The array of files to be validated.
 * @param params - Optional parameters for validation, including `required` (boolean), `fileMaxSize` (number), and other file-related constraints.
 * @returns The error message generated during validation. An empty string indicates that the validation passed successfully.
 */
export const validateFileArrayField: ValidationFunction<File[]> = (value, params) => {
  if (value == undefined) {
    // toast.error(value)
    return "please select a file"
  }
  if (value === null) {
    if (params?.required) {
      return "*required"
    }
    return ""
  }

  if (params?.required && value.length === 0) {
    return "*required"
  }

  if (value.length > 10) {
    return "*length must be less than or equal to 10"
  }

  for (const file of value) {
    const maxSizeInBytes = 1024 * 1024 // 1MB
    if (typeof file !== "string" && file.size > maxSizeInBytes) {
      return "File size must be less than 1MB for each file"
    }
  }

  return ""
}

export const validatePhoneField: ValidationFunction<string> = (value, params) => {
  if (value === null) {
    if (params?.required) {
      return "*required"
    }
    return ""
  }
  if (params?.required && value.length === 0) {
    return "*required"
  }
  if (value.length <= 10) {
    return "*Invalid"
  }
  try {
    const phoneUtil = PhoneNumberUtil.getInstance()
    return phoneUtil.isValidNumber(phoneUtil.parseAndKeepRawInput(value)) ? "" : "*Invalid"
  } catch (error) {
    return ""
  }
}
export const validateEmailField: ValidationFunction<string> = (value, params) => {
  if (value === null) {
    if (params?.required) {
      return "*required";
    }
    return "";
  }

  if (params?.required && value.trim().length === 0) {
    return "*required";
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  if (!emailRegex.test(value)) {
    return "Invalid email format";
  }

  return "";
};

export const validatePdfField: ValidationFunction<File> = async (value, params) => {
  if (value === null) {
    if (params?.required) {
      return "*required";
    }
    return "";
  }

  const maxSizeInBytes = params?.fileMaxSize ?? 5 * 1024 * 1024; // 5MB if not provided
  const acceptedTypes = ['application/pdf'];

  if (value.size > maxSizeInBytes) {
    return `File size must be less than ${maxSizeInBytes / (1024 * 1024)}MB`;
  }

  if (!acceptedTypes.includes(value.type)) {
    return "Invalid file type. Please upload a PDF file.";
  }

  return "";
};
export const validateURLField: ValidationFunction<string> = (value, params) => {
  if (value === null) {
    if (params?.required) {
      return "*required";
    }
    return "";
  }

  if (params?.required && value.trim().length === 0) {
    return "*required";
  }

  try {
    const url = new URL(value);
    // Additional checks if needed
  } catch (error) {
    return "Invalid URL format";
  }

  return "";
};